// scala code override def requires: Plugins = net.scalax.simple.nat.sbt.ProjectKeys && org.scalafmt.sbt.ScalafmtPlugin

// start autoImport
val enableZIOTest = settingKey[Boolean]("enable zio test.")
// end autoImport

// start setting
enableZIOTest := false
// end setting

// start setting
testFrameworks ++= {
    if (enableZIOTest.value) Seq(new TestFramework("zio.test.sbt.ZTestFramework")) else Seq.empty
}
// end setting

// start setting
{
    import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
    baseCrossFile := (f => Seq(f / "src" / "codegen"))
}
// end setting

// start setting
{
    import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
    Compile / baseCrossFile := {
      val t = baseCrossFile.value
      f => f / "src" / "main" +: t(f)
    }
}
// end setting

// start setting
{
    import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
    Test / baseCrossFile := {
      val t = (Compile / baseCrossFile).value
      f => (f / "src" / "test") +: (f / "src" / "test-codegen") +: t(f)
    }
}
// end setting

// start setting
{
    import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
    baseFilesToCross := {
      val tryValue = baseFilesToCross.?.value
      val newFile = baseDirectory.value
      newFile +: tryValue.toList.flatten
    }
}
// end setting

// start setting
Compile / unmanagedSourceDirectories := {
  import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
  import djx.sbt.depts.output.Djx314DeptsPlugin.autoImport._
  import inner.CommonUtils._
  import scala.collection.compat._
  val t1    = (Compile / baseFilesToCross).value
  val t2    = (Compile / baseCrossFile).value
  val base  = (Compile / unmanagedSourceDirectories).value
  val sv    = scalaVersion.value
  val files = for (n1 <- t1; n2 <- t2(n1)) yield n2
  val toAdd = for (f1 <- files; f2 <- genDirectory(f1, sv, djxIsScalaJs.value.getOrElse(false))) yield f2
  val all   = base.map(_.getCanonicalFile).to(Set) ++ toAdd.map(_.getCanonicalFile).to(Set)
  all.to(Seq)
}
// end setting

// start setting
Test / unmanagedSourceDirectories ++= {
  import net.scalax.simple.nat.sbt.ProjectKeys.autoImport._
  import djx.sbt.depts.output.Djx314DeptsPlugin.autoImport._
  import inner.CommonUtils._
  import scala.collection.compat._
  val t1    = (Test / baseFilesToCross).value
  val t2    = (Test / baseCrossFile).value
  val base  = (Test / unmanagedSourceDirectories).value
  val sv    = scalaVersion.value
  val files = for (n1 <- t1; n2 <- t2(n1)) yield n2
  val toAdd = for (f1 <- files; f2 <- genDirectory(f1, sv, djxIsScalaJs.value.getOrElse(false))) yield f2
  val all   = base.map(_.getCanonicalFile).to(Set) ++ toAdd.map(_.getCanonicalFile).to(Set)
  all.to(Seq)
}
// end setting

// start setting
scalacOptions ++= Seq("-feature", "-deprecation", "-encoding", "UTF-8")
// end setting

// start setting
scalacOptions ++= {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) =>
      val opt1 = if (scalaMajor < 13L) Seq("-language:higherKinds") else Seq.empty
      opt1 ++: Seq("-Ywarn-dead-code")
    case Some((3, scalaMajor)) => Seq("-Ykind-projector")
    case _                     => Seq.empty
  }
}
// end setting

// start setting
{
    import org.scalafmt.sbt.ScalafmtPlugin.autoImport._
    scalafmtOnCompile := true
}
// end setting

// start setting
{
    import org.scalafmt.sbt.ScalafmtPlugin.autoImport._
    Compile / compile := ((Compile / compile) dependsOn (Compile / scalafmtSbt)).value
}
// end setting

// scala code override lazy val projectSettings: Seq[Setting[_]] = preSettings