@()
package net.scalax.simple
package adt
package impl

import temp._

@ADT22Parameter(min: Int, max: Int) = {
    @if(min < max) { RuntimeData[AdtFunction[A, I@{min}], @ADT22Parameter(min + 1, max)] } else { RuntimeZero }
}

@ADT22ParameterSimple(min: Int, max: Int) = {
    @if(min < max) { RuntimeData[I@{min}, @ADT22ParameterSimple(min + 1, max)] } else { RuntimeZero }
}

@TypeParameter22(i: Int) = {
    @for(i <- 1 to i) { @if(i > 1) { , } I@{i} }
}

trait TypeAdtAlias {
    @for(i <- 1 to 22) {
        type CoProducts@{i}[A, @TypeParameter22(i)] = ADTData[@ADT22Parameter(1, i + 1), ADTPassedFunction.type with ADTTypeParameterFetch.type]
        type CoProductsX@{i}[A, ADTExtension, @TypeParameter22(i)] = ADTData[@ADT22Parameter(1, i + 1), ADTExtension with ADTTypeParameterFetch.type]
    }
}