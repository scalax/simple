@()
package net.scalax.simple
package adt
package impl

import temp._
import Adt.{Status => ADTStatus}
import net.scalax.simple.adt.nat.{AdtNat, AdtNatPositive, AdtNatZero}

@TypeParameter22(i: Int) = {
    @for(i <- 1 to i) { @if(i > 1) { , } I@{i} }
}

@ADT22Parameter(min: Int, max: Int) = {
    @if(min < max) { AdtNatPositive[I@{min}, @ADT22Parameter(min + 1, max)] } else { AdtNatZero }
}

trait TypeAdtAliasModel {
    @for(i <- 1 to 22) {
        type CoProduct@{i}[@TypeParameter22(i)] = ADTData[@ADT22Parameter(1, i + 1), ADTStatus.Passed.type]
        type CoProductX@{i}[ST <: ADTStatus, @TypeParameter22(i)] = ADTData[@ADT22Parameter(1, i + 1), ST]
    }
}